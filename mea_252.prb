total_nb_channels = 252
channel_groups    = {1: {}}


def get_graph(channels, channel_groups):
    edges = []
    for c in channels:
        pos_x, pos_y = channel_groups[1]['geometry'][c]
        for c2 in channels:
            if c != c2:
                pos_x2, pos_y2 = channel_groups[1]['geometry'][c2]
                if (((pos_x - pos_x2)**2 + (pos_y - pos_y2)**2) <= 2.4**2):
                    edges += [[c, c2]]
    return edges


channel_groups[1]["channels"] = range(252)
channel_groups[1]["geometry"] = {0: [9.0, 6.6],
 1: [6.0, 5.3999999999999995],
 2: [7.8, 5.3999999999999995],
 3: [8.4, 6.0],
 4: [6.0, 4.8],
 5: [7.199999999999999, 4.8],
 6: [6.6, 4.2],
 7: [9.0, 4.2],
 8: [7.8, 3.0],
 9: [7.199999999999999, 3.5999999999999996],
 10: [9.0, 1.7999999999999998],
 11: [8.4, 2.4],
 12: [9.0, 0.6],
 13: [6.6, 2.4],
 14: [5.3999999999999995, 3.0],
 15: [4.8, 4.2],
 16: [6.0, 0.6],
 17: [6.6, 0.0],
 18: [4.8, 1.7999999999999998],
 19: [5.3999999999999995, 1.2],
 20: [4.2, 0.0],
 21: [4.8, 3.0],
 22: [3.5999999999999996, 1.7999999999999998],
 23: [4.2, 2.4],
 24: [2.4, 0.6],
 25: [3.0, 1.2],
 26: [7.199999999999999, 7.199999999999999],
 27: [7.8, 7.8],
 28: [9.0, 7.199999999999999],
 29: [6.0, 6.0],
 30: [7.8, 6.0],
 31: [8.4, 6.6],
 32: [6.6, 4.8],
 33: [7.199999999999999, 5.3999999999999995],
 34: [6.0, 4.2],
 35: [9.0, 4.8],
 36: [7.8, 3.5999999999999996],
 37: [7.199999999999999, 4.2],
 38: [9.0, 2.4],
 39: [8.4, 3.0],
 40: [5.3999999999999995, 3.5999999999999996],
 41: [6.0, 3.5999999999999996],
 42: [7.199999999999999, 1.7999999999999998],
 43: [7.8, 1.2],
 44: [7.199999999999999, 0.0],
 45: [6.0, 3.0],
 46: [6.0, 1.2],
 47: [6.6, 0.6],
 48: [4.8, 2.4],
 49: [5.3999999999999995, 1.7999999999999998],
 50: [4.2, 3.0],
 51: [4.8, 0.0],
 52: [3.5999999999999996, 1.2],
 53: [4.2, 1.7999999999999998],
 54: [2.4, 0.0],
 55: [3.0, 0.6],
 56: [5.3999999999999995, 7.199999999999999],
 57: [6.0, 9.0],
 58: [4.8, 6.6],
 59: [5.3999999999999995, 8.4],
 60: [4.8, 9.0],
 61: [4.8, 7.8],
 62: [5.3999999999999995, 5.3999999999999995],
 63: [7.8, 9.0],
 64: [9.0, 7.8],
 65: [9.0, 8.4],
 66: [7.8, 6.6],
 67: [8.4, 7.199999999999999],
 68: [6.6, 5.3999999999999995],
 69: [7.199999999999999, 6.0],
 70: [8.4, 4.8],
 71: [9.0, 5.3999999999999995],
 72: [7.8, 4.2],
 73: [5.3999999999999995, 4.2],
 74: [9.0, 3.0],
 75: [8.4, 3.5999999999999996],
 76: [7.199999999999999, 2.4],
 77: [6.6, 3.0],
 78: [8.4, 1.2],
 79: [7.8, 1.7999999999999998],
 80: [7.8, 0.0],
 81: [8.4, 0.0],
 82: [6.6, 1.2],
 83: [7.199999999999999, 0.6],
 84: [5.3999999999999995, 2.4],
 85: [6.0, 1.7999999999999998],
 86: [4.8, 0.6],
 87: [5.3999999999999995, 0.0],
 88: [4.2, 1.2],
 89: [4.2, 3.5999999999999996],
 90: [3.0, 0.0],
 91: [3.5999999999999996, 0.6],
 92: [2.4, 1.7999999999999998],
 93: [3.0, 2.4],
 94: [8.4, 7.8],
 95: [8.4, 8.4],
 96: [7.199999999999999, 6.6],
 97: [7.8, 7.199999999999999],
 98: [9.0, 6.0],
 99: [6.6, 6.0],
 100: [7.8, 4.8],
 101: [8.4, 5.3999999999999995],
 102: [8.4, 4.2],
 103: [5.3999999999999995, 4.8],
 104: [6.6, 3.5999999999999996],
 105: [9.0, 3.5999999999999996],
 106: [7.8, 2.4],
 107: [7.199999999999999, 3.0],
 108: [9.0, 1.2],
 109: [8.4, 1.7999999999999998],
 110: [7.8, 0.6],
 111: [8.4, 0.6],
 112: [6.6, 1.7999999999999998],
 113: [7.199999999999999, 1.2],
 114: [6.0, 0.0],
 115: [6.0, 2.4],
 116: [4.8, 1.2],
 117: [5.3999999999999995, 0.6],
 118: [4.2, 0.6],
 119: [4.8, 3.5999999999999996],
 120: [3.5999999999999996, 2.4],
 121: [3.5999999999999996, 0.0],
 122: [2.4, 1.2],
 123: [3.0, 1.7999999999999998],
 124: [4.8, 4.8],
 125: [8.4, 9.0],
 126: [4.2, 4.2],
 127: [0.6, 0.0],
 128: [0.0, 2.4],
 129: [3.0, 3.5999999999999996],
 130: [1.2, 3.5999999999999996],
 131: [0.6, 3.0],
 132: [3.0, 4.2],
 133: [1.7999999999999998, 4.2],
 134: [2.4, 4.8],
 135: [0.0, 4.8],
 136: [1.2, 6.0],
 137: [1.7999999999999998, 5.3999999999999995],
 138: [0.0, 8.4],
 139: [2.4, 6.6],
 140: [0.0, 7.199999999999999],
 141: [0.6, 6.6],
 142: [3.0, 7.199999999999999],
 143: [5.3999999999999995, 9.0],
 144: [2.4, 9.0],
 145: [4.8, 8.4],
 146: [4.8, 7.199999999999999],
 147: [4.2, 5.3999999999999995],
 148: [4.8, 6.0],
 149: [4.2, 7.8],
 150: [4.2, 6.6],
 151: [4.2, 9.0],
 152: [3.5999999999999996, 3.5999999999999996],
 153: [3.5999999999999996, 3.0],
 154: [1.7999999999999998, 1.7999999999999998],
 155: [1.2, 1.2],
 156: [0.0, 1.7999999999999998],
 157: [3.0, 3.0],
 158: [1.2, 3.0],
 159: [0.6, 2.4],
 160: [2.4, 4.2],
 161: [1.7999999999999998, 3.5999999999999996],
 162: [3.0, 4.8],
 163: [0.0, 4.2],
 164: [1.2, 5.3999999999999995],
 165: [1.7999999999999998, 4.8],
 166: [0.0, 6.6],
 167: [0.6, 6.0],
 168: [1.7999999999999998, 7.199999999999999],
 169: [1.2, 7.8],
 170: [3.5999999999999996, 5.3999999999999995],
 171: [3.0, 5.3999999999999995],
 172: [3.5999999999999996, 7.199999999999999],
 173: [3.5999999999999996, 8.4],
 174: [3.0, 7.8],
 175: [3.0, 9.0],
 176: [2.4, 8.4],
 177: [3.0, 6.6],
 178: [1.7999999999999998, 9.0],
 179: [2.4, 7.199999999999999],
 180: [3.0, 6.0],
 181: [1.7999999999999998, 7.8],
 182: [4.2, 6.0],
 183: [4.8, 5.3999999999999995],
 184: [4.2, 7.199999999999999],
 185: [4.2, 8.4],
 186: [3.5999999999999996, 7.8],
 187: [3.5999999999999996, 9.0],
 188: [3.0, 8.4],
 189: [3.5999999999999996, 6.6],
 190: [1.2, 0.6],
 191: [1.7999999999999998, 1.2],
 192: [0.0, 1.2],
 193: [0.0, 0.6],
 194: [1.2, 2.4],
 195: [0.6, 1.7999999999999998],
 196: [2.4, 3.5999999999999996],
 197: [1.7999999999999998, 3.0],
 198: [0.6, 4.2],
 199: [0.0, 3.5999999999999996],
 200: [1.2, 4.8],
 201: [3.5999999999999996, 4.8],
 202: [0.0, 6.0],
 203: [0.6, 5.3999999999999995],
 204: [1.7999999999999998, 6.6],
 205: [2.4, 6.0],
 206: [1.2, 9.0],
 207: [0.6, 9.0],
 208: [0.6, 7.8],
 209: [1.2, 7.199999999999999],
 210: [1.7999999999999998, 8.4],
 211: [7.8, 8.4],
 212: [4.2, 4.8],
 213: [7.199999999999999, 7.8],
 214: [6.6, 6.6],
 215: [6.6, 7.199999999999999],
 216: [7.199999999999999, 9.0],
 217: [6.0, 6.6],
 218: [6.0, 7.8],
 219: [6.6, 8.4],
 220: [1.2, 0.0],
 221: [1.7999999999999998, 0.6],
 222: [0.6, 1.2],
 223: [0.6, 0.6],
 224: [1.7999999999999998, 2.4],
 225: [1.2, 1.7999999999999998],
 226: [0.0, 3.0],
 227: [2.4, 3.0],
 228: [1.2, 4.2],
 229: [0.6, 3.5999999999999996],
 230: [0.6, 4.8],
 231: [3.5999999999999996, 4.2],
 232: [2.4, 5.3999999999999995],
 233: [0.0, 5.3999999999999995],
 234: [1.2, 6.6],
 235: [1.7999999999999998, 6.0],
 236: [1.2, 8.4],
 237: [0.6, 8.4],
 238: [0.0, 7.8],
 239: [0.6, 7.199999999999999],
 240: [2.4, 7.8],
 241: [7.199999999999999, 8.4],
 242: [3.5999999999999996, 6.0],
 243: [6.6, 7.8],
 244: [5.3999999999999995, 6.0],
 245: [6.0, 7.199999999999999],
 246: [6.6, 9.0],
 247: [5.3999999999999995, 6.6],
 248: [5.3999999999999995, 7.8],
 249: [6.0, 8.4],
 250: [2.4, 2.4],
 251: [1.7999999999999998, 0.0]}



# HORRIBLE HACK: the channel graph is stored as an attribute in HDF5.
# Apparently, there is a limit to the size of the attributes.
# The graph here is too big, so it doesn't work.
# The hack is to *not* store the graph, we don't need it since
# we won't run SpikeDetekt.
# We can store the graph in a dataset instead of an attribute, but
# then we break compat in the file format :(

# channel_groups[1]["graph"]    = get_graph(list(range(252)), channel_groups)
channel_groups[1]['graph'] = []
